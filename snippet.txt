import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

ExtentReports reports= new ExtentReports();
ExtentSparkReporter spark = new ExtentSparkReporter("D:\\index.html");
spark.config().setTheme(Theme.DARK);
spark.config().setDocumentTitle("Automation Report");
spark.config().setReportName("SOAP UI html");
reports.attachReporter(spark);
context.report = reports;

------------------------------------------------------
context.report.flush();
------------------------------------------------------
testRunner.testCase.testSuite.project.testSuites["Library"].testCases["Reporting_Utility"].
testSteps["GenerateHTMLReport"].run(testRunner, context);
------------------------------------------------------
import com.aventstack.extentreports.markuputils.CodeLanguage;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.markuputils.ExtentColor;

try {
def testCase = testRunner.testCase.name;
def testnode = context.report.createTest(testCase);
def testAuthor = testRunner.testCase.getPropertyValue("author");
def testCategory = testRunner.testCase.getPropertyValue("category");


testnode.assignAuthor(testAuthor);
testnode.assignCategory(testCategory);
  for(stepResult in testRunner.getResults())
  {
   def testSuite = testRunner.testCase.testSuite.name;
   def testStep = stepResult.getTestStep();
   def testStepName = testStep.name
   def type = testStep.config.type
   def status = stepResult.getStatus()
  
   if(status.toString().equalsIgnoreCase("OK")){
   	testnode.pass(testStepName+" is passed");
   }
   if(status.toString().equalsIgnoreCase("Failed")){
   	testnode.fail(MarkupHelper.createLabel(testStepName+" is failed", ExtentColor.RED));
   	for(resMessage in stepResult.getMessages())
   {
     testnode.fail(MarkupHelper.createLabel(resMessage, ExtentColor.RED));
   }
   }
  
    if(type=="request")
        {
       def extRequest = testStep.getProperty("RawRequest").getValue();  
       def extResponse = stepResult.getResponseContent(); 
       testnode.info("---------Request-------------");   
	  testnode.info(MarkupHelper.createCodeBlock(extRequest, CodeLanguage.XML));
	  testnode.info("---------Response-------------");   
	  testnode.info(MarkupHelper.createCodeBlock(extResponse, CodeLanguage.XML));
        }
    if(type=="restrequest"){
    	  def extRequest = testStep.getProperty("RawRequest").getValue();  
       def extResponse = stepResult.getResponseContent(); 
    
       String therequestUri = new String(context.getProperty("requestUri").toString());
       testnode.info therequestUri;
       if(extRequest.length()> 0){
        testnode.info("---------Request-------------");    
	  testnode.info(MarkupHelper.createCodeBlock(extRequest, CodeLanguage.JSON));
       }
	  testnode.info("---------Response-------------");  
	  testnode.info(MarkupHelper.createCodeBlock(extResponse, CodeLanguage.JSON));
    }

     
   }
 }
catch(exc)
{
   log.error("Exception happened: " + exc.toString());
}